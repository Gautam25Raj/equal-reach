// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  username String @unique
  email String @unique
  emailVerified DateTime?
  password String?
  hashedPassword String?
  bio String?
  image String?
  coverImage String?
  profileImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followingIds String[] @db.ObjectId
  followersIds String[] @db.ObjectId
  hasNotifications Boolean?

  accounts Account[]
  posts Post[]
  comments Comment[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  provider String
  providerAccountId String
  userId String @db.ObjectId
  accessToken String
  accessTokenExpires DateTime?
  refreshToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  likedIds String[] @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

}